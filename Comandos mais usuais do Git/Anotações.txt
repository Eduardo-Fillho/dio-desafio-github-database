COMANDOS MAIS UTILIZADOS DO GIT!

1) Git clone - baixa o código-fonte existente de um repositório remoto para salvar no computador. Importante fazer isso direot na pasta local.
$ git clone <colar o link>


2) Git branch - branches (ramificações). Possibilidade de trabalhar de forma paralela no mesmo projeto simultaneamente. O comando git branch para criar, listar e 
excluir as branches.
Criar uma branch: $ git branch <nome-da-branch>
Enviar ao repositório remoto: $ git push -u <local-remoto> <nome-da-branch>
Visualizar: $ git branch ou git branch --list
Excluir: $ git branch -d <nome-da-branch>


3) Git checkout - Para trabalhar em uma branch, primeiro, é preciso "entrar" nela. Usamos git checkout, na maioria dos casos, para trocar de uma branch para outra. 
Também podemos usar o comando para fazer o checkout de arquivos e commits.
$ git checkout <nome-da-branch>

Observações: 
1 - As alterações em sua branch atual devem estar em um commit ou em um stash antes de você fazer a troca.
2- A branch na qual você quer fazer o checkout deve existir no seu espaço de trabalho local.

Também existe um comando de atalho que permite criar e automaticamente trocar para a branch criada ao mesmo tempo:
$ git checkout -b <nome-da-branch>
Esse comando cria a branch em seu espaço de trabalho local (a flag -b representa a branch) e faz o checkout na nova branch logo após sua criação.


4) Git status - dá todas as informações necessárias sobre a branch atual.
$ git status

Obtemos as seguintes informações:
1- Se a branch em que estamos no momento está atualizada
2- Se precisamos fazer o commit, push ou pull de algo
3 - Se os arquivos estão em fase de stage, fora dessa fase ou se não estão sendo rastreados
4 - Se arquivos foram criados, modificados ou excluídos


5) Git add - precisamos usar o comando git add para incluir as alterações de um ou vários arquivos em nosso próximo commit.
$ git add <arquivo> - um único arquivo
$ git add -A - todos os arquivos

Atenção: letra vermelha quer dizer que não houve alteração. Letra verde é o okay que confirma essa alteração.
Importante: o comando git add não altera o repositório. As alterações não são salvas até que se use o git commit.


6) Git commit - é como definir um ponto de verificação no processo de desenvolvimento. É preciso escrever uma mensagem breve para explicar o que desenvolvemos ou 
alteramos no código-fonte.
$ git commit -m "mensagem do commit"
Importante: git commit salva suas alterações no espaço de trabalho local.


7) Git push - Git push faz o upload dos seus commits no repositório remoto.
$ git push <repositório-remoto> <nome-da-branch>

Entretanto, se a sua branch foi recém-criada, também é preciso fazer o upload da branch com o seguinte comando:
$ git push --set-upstream <repositório-remoto> <nome-da-branch>
ou
$ git push -u origin <nome-da-branch>
Importante: git push somente faz o upload das alterações que já estão em um commit.


8) Git pull - é usado para obter as atualizações de um repositório remoto.
$ git pull <repositório-remoto>
Observações: 
1 - repositório remoto (git fetch)
2 - trabalho local (git merge)
Importante: Essa operação pode causar conflitos que você precisará resolver manualmente.


9) Git revert - desfaz alterações.
Necessário ver o histórico de commits usando $ git log -- oneline
Vai ser exibido um valor que deverá ser utilizado para desfazer o que deseja: git revert numeração exibida; após comando pressione shift + q para sair da tela exibida.


10) Git merge - quando concluído o desenvolvimento em sua branch e quando tudo funcionar bem, a etapa final é fazer o merge (mesclar ou unir).
$ git merge 

É importante lembrar que, primeiro, você precisa estar na branch específica na qual você quer fazer o merge de sua branch com o recurso.
Por exemplo, ao querer fazer o merge de sua branch do recurso na branch dev:
1 - troque para a branch dev $ git checkout dev
2 - atualize sua branch dev local $ git fetch
3 - faça o merge da sua branch do recurso em dev $ git merge <nome-da-branch-com-o-recurso>



